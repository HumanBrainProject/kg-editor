###
#  summary: Delete a specific entity
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to delete
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to delete
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to delete
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to delete
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
DELETE    /instance/:org/:domain/:schema/:version/:id                  controllers.EditorController.deleteInstance(org: String, domain:String, schema: String, version:String, id: String)


###
#  summary: get a list of entities
#  tags:
#    - editor
#  parameters:
#  - in: body
#    description: A list of IDs
#    required: true
#    type: array
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST    /instances                 controllers.EditorController.getInstancesByIds(allFields:Boolean?=false)


###
#  summary: get scope of an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization of the instance to get scope
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to get scope
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name of the instance to get scope
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to get scope
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to get scope
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /scopes/:org/:domain/:schema/:version/:id                  controllers.EditorController.getInstanceScope(org: String, domain:String, schema: String, version:String, id: String)


###
#  summary: add user to the scope of an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization of the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name of the instance
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - name: user
#    in: path
#    description: the user to be added to the instance' scope
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
PUT    /scopes/:org/:domain/:schema/:version/:id/:user                 controllers.EditorController.addUserToInstanceScope(org: String, domain:String, schema: String, version:String, id: String, user: String)


###
#  summary: remove user of the scope of an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization of the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name of the instance
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - name: user
#    in: path
#    description: the user to be added to the instance' scope
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
DELETE    /scopes/:org/:domain/:schema/:version/:id/:user                 controllers.EditorController.removeUserOfInstanceScope(org: String, domain:String, schema: String, version:String, id: String, user: String)


###
#  summary: get messages from ui directive
#  tags:
#    - editor
###
GET    /directives/messages                controllers.EditorController.getUiDirectivesMessages()



###
#tags:
#  - editor
#summary: Returns the instances  by schema - paginated - filterable
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - name: from
#    in: path
#    description: the offset of the pagination
#    required: false
#    type: int
#  - name: size
#    in: path
#    description: the size of the page
#    required: false
#    type: int
#  - name: search
#    in: path
#    description: the search query only applied for the name of the instance
#    required: false
#    type: string
#    responses:
#      '200':
#        description: Ok
###
GET /instances/:org/:domain/:schema/:version        controllers.EditorUserController.getInstancesOfBookmarkListBySchema(org: String, domain:String, schema: String, version:String, from:Option[Int], size:Option[Int], search:String?="")

###
#  summary: return a an empty form for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /instance/:org/:domain/:schema/:version                  controllers.EditorController.getEmptyForm(org: String, domain:String, schema: String, version:String)

###
#  summary: return the graph payload for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to fetch
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /instance/:org/:domain/:schema/:version/:id/graph                  controllers.EditorController.getInstanceGraph(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: return the release payload for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to fetch
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /instance/:org/:domain/:schema/:version/:id/release                  controllers.EditorController.getInstanceRelease(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: do release  for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to fetch
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
PUT    /release/:org/:domain/:schema/:version/:id                  controllers.EditorController.putInstanceRelease(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: do unrelease  for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to fetch
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
DELETE    /release/:org/:domain/:schema/:version/:id                  controllers.EditorController.deleteInstanceRelease(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: Get the current structure
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET   /structure                                                             controllers.EditorController.getStructure(withLinks:Boolean?=false)

###
#  summary: Return TOP_INSTANCE_ONLY status
#  tags:
#    - editor
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST /releases                  controllers.EditorController.postReleaseInstance(releaseTreeScope:String?="")

###
#  summary: Return query
#  tags:
#    - editor
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET /query                  controllers.EditorController.getQuery()

###
#tags:
#  - editor
#summary: Returns the result of query
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - in: path
#    name: id
#    description: Id of the bookmark list
#    required: true
#    type: string
#  - name: from
#    in: path
#    description: the offset of the pagination
#    required: false
#    type: int
#  - name: size
#    in: path
#    description: the size of the page
#    required: false
#    type: int
#  - name: search
#    in: path
#    description: the search query only applied for the name of the instance
#    required: false
#    type: string
#responses:
#  '200':
#    description: Ok
###
POST /query/:org/:domain/:schema/:version/instances                     controllers.EditorController.performQuery(org: String, domain:String, schema: String, version:String, vocab:Option[String], size:Int=20, start:Int=0, databaseScope: Option[String])

###
#  summary: Delete saved query
#  tags:
#    - editor
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: queryId
#    in: path
#    description: the query id
#    required: true
#    type: string
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
DELETE /query/:org/:domain/:schema/:version/:queryId                  controllers.EditorController.deleteQuery(org: String, domain:String, schema: String, version:String, queryId: String)

###
#  summary: Save query
#  tags:
#    - editor
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: queryId
#    in: path
#    description: the query id
#    required: true
#    type: string
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
PUT /query/:org/:domain/:schema/:version/:queryId                  controllers.EditorController.saveQuery(org: String, domain:String, schema: String, version:String, queryId: String)

###
#  summary: Return suggestions
#  tags:
#    - editor
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: start
#    in: path
#    description: param to start
#    required: true
#    type: string
#  - name: size
#    in: path
#    description: total size returned
#    required: true
#    type: string
#  - name: search
#    in: path
#    description: search query
#    required: true
#    type: string
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST /suggestions/:org/:domain/:schema/:version/fields                  controllers.EditorController.getSuggestions(org: String, domain: String, schema: String, version: String, field: String, fieldType: String, start: Int=0, size: Int=50, search: String?="")



###
#  summary: update an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to update
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to update
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to update
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to update
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
PUT   /instance/:org/:domain/:schema/:version/:id                   controllers.EditorController.updateInstance(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: create a new instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to create
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to create
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to create
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST   /instance/:org/:domain/:schema/:version                  controllers.EditorController.createInstance(org: String, domain:String, schema: String, version:String)

###
#  summary: Get the number of revisions available for a specific instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /revisions/:org/:domain/:schema/:version/:id                         controllers.EditorController.getInstanceNumberOfAvailableRevisions(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: Get the current user as an Editor User
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  responses:
#    200:
#      description: "Ok"
###
GET   /user                                             controllers.EditorUserController.getOrCreateCurrentUser

###
#      tags:
#        - editor
#      summary: Returns the lists of instance regrouped by folders
#      parameters:
#        - in: header
#          name: Authorization
#          description: Authorization token
#          required: false
#          type: string
#      responses:
#        '200':
#          description: Ok
#          example:
#           data:
#             - folderName: example
#               folderType: BOOKMARK|NODETYPE|...
#               lists:
#                 - id: ...
#                   name: name of the list
#                   editable: true | false
#                   uiSpec: 'A JSON object containing info specific for the UI'
#
###
GET /bookmarkListFolders                                controllers.EditorUserController.getBookmarkListFolders

###
#tags:
#  - editor
#summary: Returns the instances  by schema - paginated - filterable
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - name: from
#    in: path
#    description: the offset of the pagination
#    required: false
#    type: int
#  - name: size
#    in: path
#    description: the size of the page
#    required: false
#    type: int
#  - name: search
#    in: path
#    description: the search query only applied for the name of the instance
#    required: false
#    type: string
#    responses:
#      '200':
#        description: Ok
###
GET /bookmarkListInstances/:org/:domain/:schema/:version        controllers.EditorUserController.getInstancesOfBookmarkListBySchema(org: String, domain:String, schema: String, version:String, from:Option[Int], size:Option[Int], search:String?="")

###
#tags:
#  - editor
#summary: Returns the instances of a list - paginated - filterable
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - in: path
#    name: id
#    description: Id of the bookmark list
#    required: true
#    type: string
#  - name: from
#    in: path
#    description: the offset of the pagination
#    required: false
#    type: int
#  - name: size
#    in: path
#    description: the size of the page
#    required: false
#    type: int
#  - name: search
#    in: path
#    description: the search query only applied for the name of the instance
#    required: false
#    type: string
#responses:
#  '200':
#    description: Ok
###
GET /bookmarkListInstances/:org/:domain/:schema/:version/:id                            controllers.EditorUserController.getInstancesbyBookmarkList(org: String, domain:String, schema: String, version:String, id: String, from:Int=0, size:Int=20, search:String?="")

###
#tags:
#  - editor
#summary: Creates a bookmark list for the current user and returns its ID
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: true
#    type: string
#  - in: body
#    name: name
#    description: The new bookmark list's name
#    required: true
#    type: string
#  - in: body
#    name: folderId
#    description: The folder to which to bookmark list will be held
#    required: true
#    type: string
#responses:
#  '201':
#    description: Created
###
POST /bookmarkList                                          controllers.EditorUserController.createBookmarkList

###
#tags:
#  - editor
#summary: Update a bookmark list name
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: true
#    type: string
#  - in: body
#    name: name
#    description: The new bookmark list's name
#    required: true
#    type: string
#responses:
#  '204':
#    description: No Content
###
PUT /bookmarkList/:org/:domain/:schema/:version/:id                                         controllers.EditorUserController.updateBookmarkList(org: String, domain:String, schema: String, version:String, id: String)


###
#tags:
#  - editor
#summary: Delete a bookmark list and all its bookmarks
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: true
#    type: string
#responses:
#  '204':
#    description: No Content
###
DELETE /bookmarkList/:org/:domain/:schema/:version/:id                                          controllers.EditorUserController.deleteBookmarkList(org: String, domain:String, schema: String, version:String, id: String)



###
#tags:
#  - editor
#summary: Bind an instance to multiple bookmarks
#parameters:
#  - in: path
#    name: org
#    type: string
#    required: true
#  - in: path
#    name: domain
#    type: string
#    required: true
#  - in: path
#    name: schema
#    type: string
#    required: true
#  - in: path
#    name: version
#    type: string
#    required: true
#  - in: path
#    name: id
#    type: string
#    required: true
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - in: body
#    description: A list of bookmark IDs
#    required: false
#    type: array
#responses:
#  '200':
#    description: Ok
###
PUT /instance/:org/:domain/:schema/:version/:id/bookmarks       controllers.EditorUserController.updateBookmarks(org: String, domain:String, schema: String, version:String, id: String)

###
#  tags:
#    - editor
#  summary: get bookmark information of a list of instances - similar to releasestatus
#  parameters:
#    - in: body
#      name: instances
#      description: array of ids of the entities to retrieve
#      schema:
#        type: array
#    - in: header
#      name: Authorization
#      description: Authorization token
#      required: false
#      type: string
###
POST /bookmarks                                                 controllers.EditorUserController.retrieveBookmarks


#Review Routes
-> /review review.Routes